{{define "server"}}

{{- if .Services}}
//
// Server
//

import express from 'express'

    {{- range .Services}}
        {{$name := .Name}}
        {{$serviceName := .Name | serviceInterfaceName}}

        export type {{$serviceName}}Service = {
            {{range .Methods}}
                {{.Name}}: (args: {{.Name}}Args) => {{.Name}}Return | Promise<{{.Name}}Return>
            {{end}}
        }

        export const create{{$serviceName}}App = (serviceImplementation: {{$serviceName}}Service) => {
            const app = express();

            app.use(express.json())

            app.post('/*', async (req, res) => {
                const requestPath = req.baseUrl + req.path

                if (!req.body) {
                    res.status(400).send("webrpc error: missing body");

                    return
                }

                switch(requestPath) {
                    {{range .Methods}}

                    case "/rpc/{{$name}}/{{.Name}}": {                        
                        try {
                            {{ range .Inputs }}
                                {{- if not .Optional}}
                                if (!("{{ .Name }}" in req.body)) {
                                    throw new WebRPCError("Missing argument: {{ .Name }}")
                                }
                                {{end -}}
                                if ("{{ .Name }}" in req.body && !validateType(req.body["{{ .Name }}"], "{{ .Type | jsFieldType }}")) {
                                    throw new WebRPCError("Invalid argument type: {{ .Name }}. Expected {{ .Type | jsFieldType }}.")
                                }
                            {{end}}

                            const response = await serviceImplementation["{{.Name}}"](req.body);

                            {{ range .Outputs}}
                                if (!("{{ .Name }}" in response)) {
                                    throw new WebRPCError("internal", 500);
                                }
                            {{end}}

                            res.status(200).json(response);
                        } catch (err) {
                            if (err instanceof WebRPCError) {
                                res.status(err.status).json({
                                    msg: err.msg,
                                    status: err.status,
                                    code: err.code
                                });

                                return;
                            }

                            if (err.message) {
                                res.status(500).send(err.message);

                                return;
                            }

                            res.status(500).end();
                        }
                    }

                    return;
                    {{end}}

                    default: {
                        res.status(404).end()
                    }
                }
            });

            return app;
        };
    {{- end}}
{{end -}}
{{end}}
