{{define "client_helpers"}}
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

export class WebRPCError extends Error implements WebRPCError {
  code: string
  msg: string
  status: number

  constructor(props: { code: string; msg: string; status: number }) {
    const { code, msg, status } = props
    super(msg)
    this.name = 'WebRPCError'
    this.code = code
    this.msg = msg
    this.status = status
  }
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw new WebRPCError({ code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status })
    }
    if (!res.ok) {
      throw new WebRPCError(data) // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
{{end}}
