{{- define "proto_html" -}}
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- 
    {{.Name}} {{.SchemaVersion}} {{.SchemaHash}}
    This file has been generated by https://github.com/crooke/webrpc using gen/html
    Do not edit by hand. Update your webrpc schema and re-generate.
    -->
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Name}} {{.SchemaVersion}} Docs</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
</head>
<body class="container">
    {{template "body" .}}
</body>
<script>
  // WebRPC description and code-gen version
  const WebRPCVersion = "{{.WebRPCVersion}}"
  // Schema version of your RIDL schema
  const WebRPCSchemaVersion = "{{.SchemaVersion}}"
  // Schema hash generated from your RIDL schema
  const WebRPCSchemaHash = "{{.SchemaHash}}"

  {{template "types" .}}
  {{template "client" .}}
  {{template "client_helpers" .}}

  {{- if .Services}}
  // TODO: get it from an element (or use window.origin?)
  const hostname = "http://localhost:3000";
  {{ range $i, $service := .Services}}
  const service{{$i}} = new {{.Name}}(hostname, window.fetch.bind());

  {{ range $j, $method := .Methods}}
  document.getElementById('{{.Name}}-form').addEventListener('submit', async (event) => {
  event.preventDefault();
  const form = event.target;
  const data = {};

  {{ range .Inputs }}
  {{- $htmlType := . | methodArgType }}
  {{- if eq $htmlType "number" -}}
  data["{{.Name}}"] = Number(form["{{.Name}}"].value);
  {{ else if eq $htmlType "checkbox" -}}
  data["{{.Name}}"] = form["{{.Name}}"].checked
  {{ else -}}
  data["{{.Name}}"] = form["{{.Name}}"].value;
  {{ end -}}
  {{ end }}

  const successEl = document.getElementById(`{{.Name}}-success`);
  const errorEl = document.getElementById(`{{.Name}}-error`);

  try {
    const result = await service{{$i}}["{{.Name | methodName}}"](data);
    successEl.hidden = false;
    errorEl.hidden = true;
    successEl.innerText = JSON.stringify(result, null, 2);
  } catch (e) {
    successEl.hidden = true;
    errorEl.hidden = false;
    errorEl.innerText = e.toString();
  }
  });
  {{end -}}
  {{end -}}
  {{end -}}
</script>
</html>
{{end}}
